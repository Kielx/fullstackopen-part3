{"version":3,"sources":["components/PersonsDBService.js","components/PersonsList.js","components/Input.js","components/PhonebookForm.js","components/Filter.js","index.js"],"names":["baseUrl","create","newObject","persons","setPersons","displayMessage","personObject","a","axios","post","res","concat","data","name","phone","delPerson","id","personName","personPhone","Object","values","forEach","person","_id","window","confirm","delete","then","response","pr","status","statusText","filter","catch","err","db","get","patchPersonNumber","newPhoneNumber","existingPerson","patch","temp","PersonsList","filteredPersons","newPersons","map","key","type","className","onClick","PersonsDBService","Input","val","changeHandler","htmlFor","value","onChange","PhonebookForm","newName","setNewName","setNewPhoneNumber","handleNewNameAdd","event","target","Filter","setFilter","App","useState","filterResult","setFilterResult","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isMessageDisplayed","setIsMessageDisplayed","messageType","message","msg","Error","clearTimeout","timeout","setTimeout","clearInputs","useEffect","toLowerCase","includes","changeFilterResult","preventDefault","exists","personsDBService","Alert","variant","Spinner","animation","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46fc64d0.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"/api/persons\" || \"http://localhost:3001/api/persons\";\n\nconst create = async (\n  newObject,\n  persons,\n  setPersons,\n  displayMessage,\n  personObject\n) => {\n  try {\n    const res = await axios.post(baseUrl, newObject);\n    setPersons(persons.concat(res.data));\n    displayMessage(\n      \"success\",\n      `${personObject.name} with phone number ${personObject.phone} was successfully created`\n    );\n  } catch (e) {\n    displayMessage(\"error\", \"Data provided is invalid\");\n  }\n};\n\nconst delPerson = (id, persons, setPersons, displayMessage) => {\n  let personName;\n  let personPhone;\n  Object.values(persons).forEach((person) => {\n    if (person._id === id) {\n      personName = person.name;\n      personPhone = person.phone;\n    }\n  });\n  if (window.confirm(`Do you really want to delete ${personName}?`)) {\n    axios\n      .delete(`${baseUrl}/${id}`)\n      .then((response, pr) => {\n        if (response.status === 200 && response.statusText === \"OK\") {\n          pr = persons.filter((person) => person._id !== id);\n          setPersons(pr);\n          displayMessage(\n            \"success\",\n            `${personName} with phone number ${personPhone} was successfully deleted!`\n          );\n        }\n      })\n      .catch((err, db) => {\n        displayMessage(\"error\", `Selected user does not exist!`);\n\n        db = axios.get(`${baseUrl}`);\n        db.then((res) => {\n          setPersons(res.data);\n        });\n      });\n  }\n};\n\nconst patchPersonNumber = async (\n  persons,\n  setPersons,\n  displayMessage,\n  newPhoneNumber,\n  existingPerson\n) => {\n  let res;\n  try {\n    res = await axios.patch(`${baseUrl}/${existingPerson._id}`, {\n      phone: newPhoneNumber,\n    });\n\n    let temp = [...persons];\n    temp.forEach((person) => {\n      if (person._id === res.data._id) {\n        person.phone = newPhoneNumber;\n      }\n    });\n    setPersons(temp);\n    displayMessage(\n      \"success\",\n      `${existingPerson.name} phone number was successfully updated to ${newPhoneNumber}`\n    );\n  } catch (e) {\n    displayMessage(\n      \"error\",\n      \"Error ocurred while trying to change person number\"\n    );\n    let db = axios.get(`${baseUrl}`);\n    db.then((res) => {\n      setPersons(res.data);\n    });\n  }\n};\n\nexport default { create, delPerson, patchPersonNumber };\n","import React from \"react\";\nimport PersonsDBService from \"./PersonsDBService\";\n\nconst PersonsList = ({\n  persons,\n  filteredPersons,\n  setPersons,\n  displayMessage,\n}) => {\n  const newPersons = filteredPersons.map((person) => (\n    <div key={person._id}>\n      <li id={person._id}>\n        {person.name} {person.phone}\n      </li>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger btn-sm\"\n        onClick={() => {\n          PersonsDBService.delPerson(\n            person._id,\n            persons,\n            setPersons,\n            displayMessage\n          );\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  ));\n  return <ul>{newPersons}</ul>;\n};\n\nexport default PersonsList;\n","import React from \"react\";\n\nconst Input = ({ val, changeHandler, name }) => {\n  return (\n    <div>\n      <label htmlFor={name}>{name}</label>\n      <input id={name} value={val} onChange={changeHandler} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"./Input\";\n\nexport default function PhonebookForm({\n  newName,\n  newPhoneNumber,\n  setNewName,\n  setNewPhoneNumber,\n  handleNewNameAdd,\n}) {\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewPhoneNumber = (event) => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  return (\n    <form>\n      <Input\n        val={newName}\n        changeHandler={handleNameChange}\n        name={\"Name:\"}\n      ></Input>\n      <Input\n        val={newPhoneNumber}\n        changeHandler={handleNewPhoneNumber}\n        name={\"Phone number:\"}\n      ></Input>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        onClick={handleNewNameAdd}\n      >\n        Add new phonebook record\n      </button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport Input from \"./Input\";\n\nconst Filter = ({ filter, setFilter }) => {\n  const handleFilter = (event) => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <Input\n      val={filter}\n      changeHandler={handleFilter}\n      name={\"Filter results\"}\n    ></Input>\n  );\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport PersonsList from \"./components/PersonsList\";\nimport PhonebookForm from \"./components/PhonebookForm\";\nimport personsDBService from \"./components/PersonsDBService\";\nimport Filter from \"./components/Filter\";\n\nconst App = () => {\n  //state\n  const [persons, setPersons] = useState(\"\");\n  const [newName, setNewName] = useState(\"\");\n  const [newPhoneNumber, setNewPhoneNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [filterResult, setFilterResult] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [isMessageDisplayed, setIsMessageDisplayed] = useState(false);\n\n  //helper functions\n\n  const displayMessage = (messageType, message) => {\n    let msg = \"\";\n    switch (messageType) {\n      case \"error\":\n        msg = setErrorMessage;\n        setErrorMessage(message);\n        setSuccessMessage(\"\");\n        break;\n      case \"success\":\n        msg = setSuccessMessage;\n        setSuccessMessage(message);\n        setErrorMessage(\"\");\n        break;\n      default:\n        throw new Error(\"Invalid message type\");\n    }\n    if (isMessageDisplayed) {\n      clearTimeout(isMessageDisplayed);\n    }\n    let timeout = setTimeout(() => {\n      msg(\"\");\n      setIsMessageDisplayed(false);\n    }, 5000);\n    setIsMessageDisplayed(timeout);\n  };\n\n  const clearInputs = () => {\n    setNewName(\"\");\n    setNewPhoneNumber(\"\");\n  };\n\n  const handleNewNameAdd = (event) => {\n    event.preventDefault();\n    let existingPerson;\n    let exists = false;\n    persons.forEach((person) => {\n      if (Object.values(person).includes(newName)) {\n        exists = true;\n        existingPerson = person;\n      }\n    });\n    if (\n      exists &&\n      window.confirm(\n        `The name ${existingPerson.name} already exists, do you want to update the phone number for selected person?`\n      )\n    ) {\n      personsDBService.patchPersonNumber(\n        persons,\n        setPersons,\n        displayMessage,\n        newPhoneNumber,\n        existingPerson,\n        newName\n      );\n      clearInputs();\n    } else {\n      const personObject = {\n        name: newName,\n        phone: newPhoneNumber,\n      };\n      personsDBService.create(\n        personObject,\n        persons,\n        setPersons,\n        displayMessage,\n        personObject\n      );\n      clearInputs();\n    }\n  };\n\n  //useEffect\n\n  useEffect(() => {\n    let db = axios.get(\"/api/persons\");\n    db.then((res) => {\n      setPersons(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const changeFilterResult = () => {\n      let filteredPersons = persons.filter((person) => {\n        return person.name.toLowerCase().includes(filter.toLowerCase());\n      });\n      return setFilterResult(filteredPersons);\n    };\n    if (persons) {\n      changeFilterResult();\n    } else {\n      setFilterResult(\"\");\n    }\n  }, [filter, persons]);\n\n  return (\n    <div>\n      <Filter filter={filter} setFilter={setFilter} />\n      <h2>Phonebook</h2>\n      <PhonebookForm\n        newName={newName}\n        newPhoneNumber={newPhoneNumber}\n        setNewName={setNewName}\n        setNewPhoneNumber={setNewPhoneNumber}\n        handleNewNameAdd={handleNewNameAdd}\n      ></PhonebookForm>\n      <h2>Numbers</h2>\n      {successMessage ? (\n        <Alert variant=\"success\">{successMessage}</Alert>\n      ) : null}\n      {errorMessage ? <Alert variant=\"danger\">{errorMessage}</Alert> : null}\n      {typeof filterResult === \"object\" ? (\n        <PersonsList\n          persons={persons}\n          filteredPersons={filterResult}\n          setPersons={setPersons}\n          displayMessage={displayMessage}\n        ></PersonsList>\n      ) : (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}