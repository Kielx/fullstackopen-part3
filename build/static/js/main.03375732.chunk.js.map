{"version":3,"sources":["components/PersonsDBService.js","components/PersonsList.js","components/Input.js","components/PhonebookForm.js","components/Filter.js","index.js"],"names":["create","newObject","persons","setPersons","displayMessage","personObject","a","axios","post","res","concat","data","name","phone","delPerson","id","personName","personPhone","Object","values","forEach","person","_id","window","confirm","delete","then","response","pr","status","statusText","filter","catch","err","db","get","patchPersonNumber","setSuccessMessage","newPhoneNumber","existingPerson","newName","patch","index","indexOf","temp","setTimeout","PersonsList","filteredPersons","newPersons","map","key","type","className","onClick","PersonsDBService","Input","val","changeHandler","htmlFor","value","onChange","PhonebookForm","setNewName","setNewPhoneNumber","handleNewNameAdd","event","target","Filter","setFilter","App","useState","filterResult","setFilterResult","errorMessage","setErrorMessage","successMessage","isMessageDisplayed","setIsMessageDisplayed","messageType","message","msg","Error","clearTimeout","timeout","clearInputs","useEffect","toLowerCase","includes","changeFilterResult","preventDefault","exists","personsDBService","Alert","variant","Spinner","animation","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03375732.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"/api/persons\" || \"http://localhost:3001/api/persons\";\n\nconst create = async (\n  newObject,\n  persons,\n  setPersons,\n  displayMessage,\n  personObject\n) => {\n  try {\n    const res = await axios.post(baseUrl, newObject);\n    setPersons(persons.concat(res.data));\n    displayMessage(\n      \"success\",\n      `${personObject.name} with phone number ${personObject.phone} was successfully created`\n    );\n  } catch (e) {\n    displayMessage(\"error\", \"Data provided is invalid\");\n  }\n};\n\nconst delPerson = (id, persons, setPersons, displayMessage) => {\n  let personName;\n  let personPhone;\n  Object.values(persons).forEach((person) => {\n    if (person._id === id) {\n      personName = person.name;\n      personPhone = person.phone;\n    }\n  });\n  if (window.confirm(`Do you really want to delete ${personName}?`)) {\n    axios\n      .delete(`${baseUrl}/${id}`)\n      .then((response, pr) => {\n        if (response.status === 200 && response.statusText === \"OK\") {\n          pr = persons.filter((person) => person._id !== id);\n          setPersons(pr);\n          displayMessage(\n            \"success\",\n            `${personName} with phone number ${personPhone} was successfully deleted!`\n          );\n        }\n      })\n      .catch((err, db) => {\n        displayMessage(\"error\", `Selected user does not exist!`);\n\n        db = axios.get(`${baseUrl}`);\n        db.then((res) => {\n          setPersons(res.data);\n        });\n      });\n  }\n};\n\nconst patchPersonNumber = (\n  persons,\n  setPersons,\n  setSuccessMessage,\n  newPhoneNumber,\n  existingPerson,\n  newName\n) => {\n  let res = axios.patch(`http://localhost:3001/persons/${existingPerson.id}`, {\n    phone: newPhoneNumber,\n  });\n  res.then((res) => {\n    let index = persons.indexOf(existingPerson);\n    let temp = [...persons];\n    temp[index] = res.data;\n    setPersons(temp);\n\n    setSuccessMessage(\n      `${newName} phone number was updated to ${newPhoneNumber} successfully!`\n    );\n    setTimeout(() => {\n      setSuccessMessage(\"\");\n    }, 5000);\n  });\n};\n\nexport default { create, delPerson, patchPersonNumber };\n","import React from \"react\";\nimport PersonsDBService from \"./PersonsDBService\";\n\nconst PersonsList = ({\n  persons,\n  filteredPersons,\n  setPersons,\n  displayMessage,\n}) => {\n  const newPersons = filteredPersons.map((person) => (\n    <div key={person._id}>\n      <li id={person._id}>\n        {person.name} {person.phone}\n      </li>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger btn-sm\"\n        onClick={() => {\n          PersonsDBService.delPerson(\n            person._id,\n            persons,\n            setPersons,\n            displayMessage\n          );\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  ));\n  return <ul>{newPersons}</ul>;\n};\n\nexport default PersonsList;\n","import React from \"react\";\n\nconst Input = ({ val, changeHandler, name }) => {\n  return (\n    <div>\n      <label htmlFor={name}>{name}</label>\n      <input id={name} value={val} onChange={changeHandler} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"./Input\";\n\nexport default function PhonebookForm({\n  newName,\n  newPhoneNumber,\n  setNewName,\n  setNewPhoneNumber,\n  handleNewNameAdd,\n}) {\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewPhoneNumber = (event) => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  return (\n    <form>\n      <Input\n        val={newName}\n        changeHandler={handleNameChange}\n        name={\"Name:\"}\n      ></Input>\n      <Input\n        val={newPhoneNumber}\n        changeHandler={handleNewPhoneNumber}\n        name={\"Phone number:\"}\n      ></Input>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        onClick={handleNewNameAdd}\n      >\n        Add new phonebook record\n      </button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport Input from \"./Input\";\n\nconst Filter = ({ filter, setFilter }) => {\n  const handleFilter = (event) => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <Input\n      val={filter}\n      changeHandler={handleFilter}\n      name={\"Filter results\"}\n    ></Input>\n  );\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport PersonsList from \"./components/PersonsList\";\nimport PhonebookForm from \"./components/PhonebookForm\";\nimport personsDBService from \"./components/PersonsDBService\";\nimport Filter from \"./components/Filter\";\n\nconst App = () => {\n  //state\n  const [persons, setPersons] = useState(\"\");\n  const [newName, setNewName] = useState(\"\");\n  const [newPhoneNumber, setNewPhoneNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [filterResult, setFilterResult] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [isMessageDisplayed, setIsMessageDisplayed] = useState(false);\n\n  //helper functions\n\n  const displayMessage = (messageType, message) => {\n    let msg = \"\";\n    switch (messageType) {\n      case \"error\":\n        msg = setErrorMessage;\n        setErrorMessage(message);\n        setSuccessMessage(\"\");\n        break;\n      case \"success\":\n        msg = setSuccessMessage;\n        setSuccessMessage(message);\n        setErrorMessage(\"\");\n        break;\n      default:\n        throw new Error(\"Invalid message type\");\n    }\n    if (isMessageDisplayed) {\n      clearTimeout(isMessageDisplayed);\n    }\n    let timeout = setTimeout(() => {\n      msg(\"\");\n      setIsMessageDisplayed(false);\n    }, 5000);\n    setIsMessageDisplayed(timeout);\n  };\n\n  const clearInputs = () => {\n    setNewName(\"\");\n    setNewPhoneNumber(\"\");\n  };\n\n  const handleNewNameAdd = (event) => {\n    event.preventDefault();\n    let existingPerson;\n    let exists = false;\n    persons.forEach((person) => {\n      if (Object.values(person).includes(newName)) {\n        exists = true;\n        existingPerson = person;\n      }\n    });\n    if (\n      exists &&\n      window.confirm(\n        `The name ${existingPerson.name} already exists, do you want to update the phone number for selected person?`\n      )\n    ) {\n      personsDBService.patchPersonNumber(\n        persons,\n        setPersons,\n        setSuccessMessage,\n        newPhoneNumber,\n        existingPerson,\n        newName\n      );\n      clearInputs();\n    } else {\n      const personObject = {\n        name: newName,\n        phone: newPhoneNumber,\n      };\n      personsDBService.create(\n        personObject,\n        persons,\n        setPersons,\n        displayMessage,\n        personObject\n      );\n      clearInputs();\n    }\n  };\n\n  //useEffect\n\n  useEffect(() => {\n    let db = axios.get(\"/api/persons\");\n    db.then((res) => {\n      setPersons(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const changeFilterResult = () => {\n      let filteredPersons = persons.filter((person) => {\n        return person.name.toLowerCase().includes(filter.toLowerCase());\n      });\n      return setFilterResult(filteredPersons);\n    };\n    if (persons) {\n      changeFilterResult();\n    } else {\n      setFilterResult(\"\");\n    }\n  }, [filter, persons]);\n\n  return (\n    <div>\n      <Filter filter={filter} setFilter={setFilter} />\n      <h2>Phonebook</h2>\n      <PhonebookForm\n        newName={newName}\n        newPhoneNumber={newPhoneNumber}\n        setNewName={setNewName}\n        setNewPhoneNumber={setNewPhoneNumber}\n        handleNewNameAdd={handleNewNameAdd}\n      ></PhonebookForm>\n      <h2>Numbers</h2>\n      {successMessage ? (\n        <Alert variant=\"success\">{successMessage}</Alert>\n      ) : null}\n      {errorMessage ? <Alert variant=\"danger\">{errorMessage}</Alert> : null}\n      {typeof filterResult === \"object\" ? (\n        <PersonsList\n          persons={persons}\n          filteredPersons={filterResult}\n          setPersons={setPersons}\n          displayMessage={displayMessage}\n        ></PersonsList>\n      ) : (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}