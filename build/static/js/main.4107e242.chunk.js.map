{"version":3,"sources":["components/PersonsDBService.js","components/PersonsList.js","components/Input.js","components/PhonebookForm.js","components/Filter.js","index.js"],"names":["baseUrl","newObject","persons","setPersons","setSuccessMessage","personObject","axios","post","then","response","data","concat","name","phone","setTimeout","catch","error","console","log","id","setErrorMessage","personName","Object","values","forEach","person","window","confirm","delete","pr","status","statusText","filter","err","db","get","res","newPhoneNumber","existingPerson","newName","patch","index","indexOf","temp","PersonsList","filteredPersons","newPersons","map","key","type","className","onClick","PersonsDBService","Input","val","changeHandler","htmlFor","value","onChange","PhonebookForm","setNewName","setNewPhoneNumber","handleNewNameAdd","event","target","Filter","setFilter","App","useState","filterResult","setFilterResult","errorMessage","successMessage","clearInputs","useEffect","toLowerCase","includes","changeFilterResult","preventDefault","exists","personsDBService","Alert","variant","Spinner","animation","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4107e242.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl =\n  \"https://fullstackopen-phonebook-api.herokuapp.com/api/persons\" ||\n  \"http://localhost:3001/api/persons\";\n\nconst create = (\n  newObject,\n  persons,\n  setPersons,\n  setSuccessMessage,\n  personObject\n) => {\n  const request = axios.post(baseUrl, newObject);\n  request\n    .then((response) => response.data)\n    .then(function (response) {\n      setPersons(persons.concat(response));\n      setSuccessMessage(\n        `${personObject.name} with phone number ${personObject.phone} was successfully created`\n      );\n      setTimeout(() => {\n        setSuccessMessage(\"\");\n      }, 5000);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};\n\nconst delPerson = (id, persons, setPersons, setErrorMessage) => {\n  let personName;\n  Object.values(persons).forEach((person) => {\n    if (person.id === id) {\n      personName = person.name;\n    }\n  });\n  if (window.confirm(`Do you really want to delete ${personName}?`)) {\n    axios\n      .delete(`${baseUrl}/${id}`)\n      .then((response, pr) => {\n        if (response.status === 200 && response.statusText === \"OK\") {\n          pr = persons.filter((person) => person.id !== id);\n          setPersons(pr);\n        }\n      })\n      .catch((err, db) => {\n        setErrorMessage(`${personName} does not exist!`);\n        setTimeout(() => {\n          setErrorMessage(\"\");\n        }, 5000);\n\n        db = axios.get(`${baseUrl}`);\n        db.then((res) => {\n          setPersons(res.data);\n        });\n      });\n  }\n};\n\nconst patchPersonNumber = (\n  persons,\n  setPersons,\n  setSuccessMessage,\n  newPhoneNumber,\n  existingPerson,\n  newName\n) => {\n  let res = axios.patch(`http://localhost:3001/persons/${existingPerson.id}`, {\n    phone: newPhoneNumber,\n  });\n  res.then((res) => {\n    let index = persons.indexOf(existingPerson);\n    let temp = [...persons];\n    temp[index] = res.data;\n    setPersons(temp);\n\n    setSuccessMessage(\n      `${newName} phone number was updated to ${newPhoneNumber} successfully!`\n    );\n    setTimeout(() => {\n      setSuccessMessage(\"\");\n    }, 5000);\n  });\n};\n\nexport default { create, delPerson, patchPersonNumber };\n","import React from \"react\";\nimport PersonsDBService from \"./PersonsDBService\";\n\nconst PersonsList = ({\n  persons,\n  filteredPersons,\n  setPersons,\n  setErrorMessage,\n}) => {\n  const newPersons = filteredPersons.map((person) => (\n    <div key={person.id}>\n      <li id={person.id}>\n        {person.name} {person.phone}\n      </li>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger btn-sm\"\n        onClick={() => {\n          PersonsDBService.delPerson(\n            person.id,\n            persons,\n            setPersons,\n            setErrorMessage\n          );\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  ));\n  return <ul>{newPersons}</ul>;\n};\n\nexport default PersonsList;\n","import React from \"react\";\n\nconst Input = ({ val, changeHandler, name }) => {\n  return (\n    <div>\n      <label htmlFor={name}>{name}</label>\n      <input id={name} value={val} onChange={changeHandler} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"./Input\";\n\nexport default function PhonebookForm({\n  newName,\n  newPhoneNumber,\n  setNewName,\n  setNewPhoneNumber,\n  handleNewNameAdd,\n}) {\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewPhoneNumber = (event) => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  return (\n    <form>\n      <Input\n        val={newName}\n        changeHandler={handleNameChange}\n        name={\"Name:\"}\n      ></Input>\n      <Input\n        val={newPhoneNumber}\n        changeHandler={handleNewPhoneNumber}\n        name={\"Phone number:\"}\n      ></Input>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        onClick={handleNewNameAdd}\n      >\n        Add new phonebook record\n      </button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport Input from \"./Input\";\n\nconst Filter = ({ filter, setFilter }) => {\n  const handleFilter = (event) => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <Input\n      val={filter}\n      changeHandler={handleFilter}\n      name={\"Filter results\"}\n    ></Input>\n  );\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport PersonsList from \"./components/PersonsList\";\nimport PhonebookForm from \"./components/PhonebookForm\";\nimport personsDBService from \"./components/PersonsDBService\";\nimport Filter from \"./components/Filter\";\n\nconst App = () => {\n  //state\n  const [persons, setPersons] = useState(\"\");\n  const [newName, setNewName] = useState(\"\");\n  const [newPhoneNumber, setNewPhoneNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [filterResult, setFilterResult] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  //helper functions\n\n  const clearInputs = () => {\n    setNewName(\"\");\n    setNewPhoneNumber(\"\");\n  };\n\n  const handleNewNameAdd = (event) => {\n    event.preventDefault();\n    let existingPerson;\n    let exists = false;\n    persons.forEach((person) => {\n      if (Object.values(person).includes(newName)) {\n        exists = true;\n        existingPerson = person;\n      }\n    });\n    if (\n      exists &&\n      window.confirm(\n        `The name ${existingPerson.name} already exists, do you want to update the phone number for selected person?`\n      )\n    ) {\n      personsDBService.patchPersonNumber(\n        persons,\n        setPersons,\n        setSuccessMessage,\n        newPhoneNumber,\n        existingPerson,\n        newName\n      );\n      clearInputs();\n    } else {\n      const personObject = {\n        name: newName,\n        phone: newPhoneNumber,\n      };\n      personsDBService.create(\n        personObject,\n        persons,\n        setPersons,\n        setSuccessMessage,\n        personObject\n      );\n      clearInputs();\n    }\n  };\n\n  //useEffect\n\n  useEffect(() => {\n    let db = axios.get(\n      \"https://fullstackopen-phonebook-api.herokuapp.com/api/persons\" ||\n        \"http://localhost:3001/api/persons\"\n    );\n    db.then((res) => {\n      setPersons(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const changeFilterResult = () => {\n      let filteredPersons = persons.filter((person) => {\n        return person.name.toLowerCase().includes(filter.toLowerCase());\n      });\n      return setFilterResult(filteredPersons);\n    };\n    if (persons) {\n      changeFilterResult();\n    } else {\n      setFilterResult(\"\");\n    }\n  }, [filter, persons]);\n\n  return (\n    <div>\n      <Filter filter={filter} setFilter={setFilter} />\n      <h2>Phonebook</h2>\n      <PhonebookForm\n        newName={newName}\n        newPhoneNumber={newPhoneNumber}\n        setNewName={setNewName}\n        setNewPhoneNumber={setNewPhoneNumber}\n        handleNewNameAdd={handleNewNameAdd}\n      ></PhonebookForm>\n      <h2>Numbers</h2>\n      {successMessage ? (\n        <Alert variant=\"success\">{successMessage}</Alert>\n      ) : null}\n      {errorMessage ? <Alert variant=\"danger\">{errorMessage}</Alert> : null}\n      {typeof filterResult === \"object\" ? (\n        <PersonsList\n          persons={persons}\n          filteredPersons={filterResult}\n          setPersons={setPersons}\n          setErrorMessage={setErrorMessage}\n        ></PersonsList>\n      ) : (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}